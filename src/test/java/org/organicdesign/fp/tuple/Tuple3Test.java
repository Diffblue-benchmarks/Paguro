// Copyright 2015 PlanBase Inc. & Glen Peterson
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.organicdesign.fp.tuple;

import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.organicdesign.fp.testUtils.EqualsContract.equalsDistinctHashCode;
import static org.organicdesign.fp.testUtils.EqualsContract.equalsSameHashCode;

// ======================================================================================
// THIS CLASS IS GENERATED BY /tupleGenerator/TupleGenerator.java.  DO NOT EDIT MANUALLY!
// ======================================================================================

public class Tuple3Test {
    @Test public void constructionAndAccess() {
        Tuple3<String,String,String> a = Tuple3.of("1st","2nd","3rd");

        assertEquals("1st", a._1());
        assertEquals("2nd", a._2());
        assertEquals("3rd", a._3());

        equalsDistinctHashCode(a, Tuple3.of("1st","2nd","3rd"),
                               Tuple3.of("1st","2nd","3rd"),
                               Tuple3.of("wrong","2nd","3rd"));


        equalsDistinctHashCode(a, Tuple3.of("1st","2nd","3rd"),
                               Tuple3.of("1st","2nd","3rd"),
                               Tuple3.of("1st","wrong","3rd"));


        equalsDistinctHashCode(a, Tuple3.of("1st","2nd","3rd"),
                               Tuple3.of("1st","2nd","3rd"),
                               Tuple3.of("1st","2nd","wrong"));

        equalsDistinctHashCode(Tuple3.of("1st",null,"3rd"),
                               Tuple3.of("1st",null,"3rd"),
                               Tuple3.of("1st",null,"3rd"),
                               Tuple3.of("1st",null,"wrong"));

        equalsDistinctHashCode(Tuple3.of(null,"2nd",null),
                               Tuple3.of(null,"2nd",null),
                               Tuple3.of(null,"2nd",null),
                               Tuple3.of(null,"2nd","wrong"));

        equalsSameHashCode(a, Tuple3.of("1st","2nd","3rd"),
                           Tuple3.of("1st","2nd","3rd"),
                           Tuple3.of("2nd","1st","3rd"));

        assertEquals("Tuple3(1st,2nd,3rd)", a.toString());
    }
}
